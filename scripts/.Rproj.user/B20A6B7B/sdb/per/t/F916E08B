{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(reshape2)\nlibrary(plyr)\nlibrary(gplots)\nlibrary(RColorBrewer)\nsource(\"utils/ggplot.R\")\nsource(\"analyze.functions.R\")\nlibrary(gridExtra)\nlibrary(igraph)\n\ncluster = function()\n{\n  media.annotation = read.delim(\"../data/media_names.tab\", sep=\"\\t\", na=\"\", quote=\"\", stringsAsFactors=F, header=T)\n  media.annotation = media.annotation[order(media.annotation$Order),]\n  media.names = sapply(media.annotation$ShortName, function(x) media.annotation$FullName[match(x, media.annotation$ShortName)])\n  media.names2 = sapply(media.annotation$ShortName, function(x) media.annotation$FullName2[match(x, media.annotation$ShortName)])\n  media.general = media.annotation$ShortName[media.annotation$IsGeneral==1]\n  media.rich = media.annotation$ShortName[media.annotation$IsRich==1]\n  \n  curves = read.table(\"../data/curves.tab\", sep=\"\\t\", quote=\"\", header=T, stringsAsFactors=F, na.strings=\"\")\n  curves.f = subset(curves, !is.na(Species) & is.na(ConditionSpecies) & !grepl(\"_|15|16\", Media))\n  #curves.f = subset(curves.f, File==\"20170609_Monoculture_Revision_Plate1-12_Species31-53_plus_empty_plate11\")\n  curves.f = ddply(curves.f, .(File, Species, Time, Media), summarize, OD=mean(OD, na.rm=T))\n  \n  # Is growing\n  curves.a = read.table(\"../data/curves_annotation.tab\", sep=\"\\t\", quote=\"\", header=T, stringsAsFactors=F, na.strings=\"\")\n  curves.a = subset(curves.a, !is.na(Species) & is.na(ConditionSpecies) & !grepl(\"_|15|16\", Media))\n  curves.a = ddply(curves.a, .(File, Species, Media), summarize, IsGrowing=any(!grepl(\"NoGrowth|Unrep|Undef\", Class)))\n  curves.f = merge(curves.f, curves.a[,c(\"File\", \"Species\", \"Media\", \"IsGrowing\")], by=c(\"File\", \"Species\", \"Media\"))\n  \n  curves.f_comb = merge(curves.f, curves.f, by=c(\"File\", \"Media\", \"Time\"), suffixes=c(\".1\", \".2\"))\n  curves.f_comb$Same = substr(curves.f_comb$Species.1, 1, 7) == substr(curves.f_comb$Species.2, 1, 7)\n  order.cols = c(\"Species.1\", \"Species.2\", \"OD.1\", \"OD.2\", \"IsGrowing.1\", \"IsGrowing.2\")\n  curves.f_comb[,order.cols] = t(apply(curves.f_comb[,order.cols], 1, function(z) {\n    z.n = 3\n    z[rep(0:(z.n-1), each=2)*2 + rep(order(z[1:2]),z.n)]\n  }))\n  curves.f_comb$IsGrowing.1 = grepl(\"TRUE\", curves.f_comb$IsGrowing.1)\n  curves.f_comb$IsGrowing.2 = grepl(\"TRUE\", curves.f_comb$IsGrowing.2)\n  curves.f_comb$OD.1 = as.numeric(curves.f_comb$OD.1)\n  curves.f_comb$OD.2 = as.numeric(curves.f_comb$OD.2)\n  curves.f_comb = curves.f_comb[with(curves.f_comb, order(File, Species.1, Species.2, Time)),]\n  curves.f_comb$Time = curves.f_comb$Time/3600\n  curves.f_dist = ddply(curves.f_comb, .(File, Same, Species.1, Species.2), function(z) {\n    #z = subset(curves.f_comb, File==\"150122_Big_growth_curves_1_plate_1\" & Species.1==\"E. coli ED1a\" & Species.2==\"L. plantarum\")\n    z = subset(z, (IsGrowing.1 | IsGrowing.2) & !(Media%in%media.rich) & !is.na(Time))\n    if(!nrow(z)) return(data.frame(distance=NA, n=0))\n    \n    #ggplot(z)+\n    #  geom_line(aes(Time, OD.1, color=Species.1, group=paste(File, Species.1, Media))) +\n    #  geom_line(aes(Time, OD.2, color=Species.2, group=paste(File, Species.2, Media))) +\n    #  facet_wrap(~Media)\n    \n    #ggplot(z)+\n    #  geom_line(aes(Time, OD.diff, color=paste(Species.1, Species.2), group=paste(File, Species.1, Species.2, Media))) +\n    #  facet_wrap(~Media)\n    \n    \n    z$OD.diff = abs(z$OD.1-z$OD.2)^2\n    z.integral = integrate(approxfun(z$Time,z$OD.diff), 1, max(z$Time), subdivisions=1000L, stop.on.error=F)\n    r = data.frame(distance=z.integral$value/max(z$Time), n=length(unique(z$Media)))\n    r$distance.norm = r$distance/r$n\n    r\n  })\n  \n  curves.f_dist$SameGenus = ifelse(curves.f_dist$Same, \"Same genus\", \"Different genus\")\n  ggplot(curves.f_dist) +\n    geom_density(aes(x=log2(distance.norm), fill=SameGenus), alpha=0.7) +\n    geom_vline(xintercept=-9, color=\"#FF0000\") +\n    scale_x_continuous(breaks=-15:0) +\n    scale_fill_brewer(\"Greys\") +\n    theme_bw()\n\n  \n  curves.f_dist.f = subset(curves.f_dist, !is.na(distance) & n>1 & !Same & log2(distance.norm)< -9)\n  curves.f_dist.f$File = as.factor(as.character(curves.f_dist.f$File))\n  curves.f_dist.f$FileN = as.numeric(curves.f_dist.f$File)\n  curves.f_dist.f$Var.1 = paste(curves.f_dist.f$FileN, \"-\", curves.f_dist.f$Species.1)\n  curves.f_dist.f$Var.2 = paste(curves.f_dist.f$FileN, \"-\", curves.f_dist.f$Species.2)\n  curves.f_dist.f = curves.f_dist.f[,c(\"Var.1\", \"Var.2\", \"Species.1\", \"Species.2\", \"File\", \"FileN\", \"distance\", \"n\", \"distance.norm\")]\n  #write.table(curves.f_dist.f, file=\"../data/suspected_contamination.tab\", sep=\"\\t\", quote=F, row.names=F, na=\"\")\n  \n  curves.f.contaminated = melt(curves.f_dist.f, id.vars=\"File\", measure.vars=c(\"Species.1\", \"Species.2\"), value.name=\"Species\")\n  curves.f.contaminated = merge(curves.f, curves.f.contaminated, by=c(\"File\", \"Species\"))\n  curves.f.contaminated$Media = factor(curves.f.contaminated$Media, sort(unique(as.numeric(curves.f.contaminated$Media))))\n  pp = list()\n  for(file in unique(curves.f_dist.f$File)) {\n    pp[[length(pp)+1]] = \n      ggplot(subset(curves.f.contaminated, File %in% file))+\n      geom_line(aes(Time/3600, OD, color=Species, group=paste(File, Species, Media))) +\n      labs(x=\"\", y=\"\", title=file) + \n      scale_x_continuous(breaks=c(), labels=c()) +\n      facet_wrap(~Media, nrow=1) +\n      theme_classic() +\n      theme(strip.text.x=element_text(angle=0, size=rel(0.5)))\n  }\n  pp[[\"ncol\"]] = 1\n  \n  pdf(\"../report/suspected_contamination.pdf\", paper=\"a4r\", height=10, width=10)\n  do.call(grid.arrange, pp)\n  dev.off()\n  \n  g = graph_from_data_frame(curves.f_dist.f, directed=F, vertices=NULL)\n  E(g)$width = (1 - curves.f_dist.f$distance.norm)*7\n  l <- layout.fruchterman.reingold(g)*5\n  plot(g, vertex.size=1, layout=l)\n\n  ddply(curves.f_dist.f, .(FileN), summarize, File=File[1])\n\n}\n\nx= function()\n{\n  curves.a = read.table(\"../data/curves_annotation.tab\", sep=\"\\t\", quote=\"\", header=T, stringsAsFactors=F, na.strings=\"\")\n  curves.a = subset(curves.a, !is.na(Species) & is.na(ConditionSpecies))\n  curves.merge.final = cuves.merge_annotations2(subset(curves.a, Volume<10))\n  curves.merge.review = cuves.merge_annotations2(subset(curves.a, Volume<9))\n  \n  \n  pdf(\"../report/replicates_improvement_histogram.pdf\", paper=\"a4r\", height=5, width=5)\n  ggplot() +\n    geom_histogram(aes(x=Replicates, fill=\"Final\"), bins=14, data=curves.merge.final, alpha=0.5)  +\n    geom_histogram(aes(x=Replicates, fill=\"Before review\"), bins=14, data=curves.merge.review, alpha=0.5) +\n    geom_vline(aes(color=\"Final\"), xintercept=median(curves.merge.final$Replicates)) +\n    geom_vline(aes(color=\"Before review\"), xintercept=median(curves.merge.review$Replicates)) +\n    labs(title=paste0(\"More than 2: \", \n                      round(mean(curves.merge.review$Replicates>=3)*100, 0), \"% / \", round(mean(curves.merge.final$Replicates>=3)*100, 0), \"%\")) +\n    theme_bw()\n  \n  dev.off()\n  \n}\n\nreproducibility_emptywells = function()\n{\n  curves = read.table(\"../data/curves.tab\", sep=\"\\t\", quote=\"\", header=T, stringsAsFactors=F, na.strings=\"\")\n  curves.empty = ddply(subset(curves, Passage==1 & !is.na(Media)), .(File, Row, Col, Well, TechnicalReplicates, Species, Media, ConditionSpecies), summarize, MaxOD=max(OD, na.rm=T), BlankOD=min(OD, na.rm=T))\n  curves.empty.f = subset(curves.empty, is.na(Species) & is.na(ConditionSpecies))\n  with(curves.empty.f, table(MaxOD - BlankOD <= 0.15))\n  curves.empty.ff = subset(curves.empty.f, MaxOD - BlankOD > 0.15)\n  \n  pdf(\"../report/contaminated_empty_wells.pdf\", paper=\"a4r\", height=8.27, width=11.69)\n  curves.f = subset(curves, paste(File, Well) %in% paste(curves.empty.ff$File, curves.empty.ff$Well))\n  ggplot(curves.f) +\n    geom_line(aes(x=Time, y=OD, group=Well)) +\n    facet_wrap(Well~File) +\n    theme_bw(base_size=18)\n  dev.off()\n}\n\nreproducibility_quantitative = function()\n{\n  media.annotation = read.delim(\"../data/media_names.tab\", sep=\"\\t\", na=\"\", quote=\"\", stringsAsFactors=F, header=T)\n  media.annotation = media.annotation[order(media.annotation$Order),]\n  media.names = sapply(media.annotation$ShortName, function(x) media.annotation$FullName[match(x, media.annotation$ShortName)])\n  media.files = sapply(media.annotation$ShortName, function(x) media.annotation$Filename[match(x, media.annotation$ShortName)])\n  \n  variables = c(\"MaxOD\", \"StatOD\", \"Rate\") #, \"OvergrowthOD\")\n  curves.a = read.table(\"../data/curves_annotation.tab\", sep=\"\\t\", quote=\"\", header=T, stringsAsFactors=F, na.strings=\"\")\n  curves.a = subset(curves.a, !is.na(Species) & is.na(ConditionSpecies))\n  curves.a = curves.a[!duplicated(curves.a[,c(\"Species\", \"Volume\", \"Media\")]),]\n  curves.a = merge(curves.a, cuves.merge_annotations2(curves.a)[,c(\"Species\", \"Media\", \"Growing\", \"Replicates\")], by=c(\"Species\", \"Media\"), all.x=T)\n  curves.a = subset(curves.a, \n                    grepl(\"NoGrowth\", Class) & (is.na(curves.a$Growing) | Growing/Replicates < 0.5) | \n                      !grepl(\"NoGrowth\", Class) & !is.na(Growing) & !is.na(Replicates) & Growing/Replicates > 0.5)\n  \n  curves.a$MediaName = media.names[curves.a$Media]\n  curves.a$MediaFile = media.files[curves.a$Media]\n  curves.a$MaxOD = curves.a$MaxOD - curves.a$BlankOD\n  curves.a$MaxOD[curves.a$MaxOD < 0] = 0\n  curves.a$StatOD = curves.a$StatOD - curves.a$BlankOD\n  curves.a$StatOD[curves.a$StatOD < 0] = 0\n  curves.a$Rate[curves.a$Rate < 0] = 0\n  curves.a.f = subset(curves.a, !(Media %in% c(\"15 A\", \"15 B\", \"16\")))\n  \n  pdf(\"../report/rep_quantitative_summary2.pdf\", paper=\"a4r\", height=8.27, width=11.69)\n  for(var in variables) {\n    curves.a.rep = ddply(curves.a.f, .(Media, MediaName, ConditionSpecies, Species), compatible.replicates, corrected=F, column=var)\n    curves.a.rep_cor = ggplot.cor_data(curves.a.rep, mapping=aes(x, y), method=\"pearson\")\n    curves.a.rep_cor$max = apply(curves.a.rep_cor, 1, function(x) max(as.numeric(x[c(\"right\", \"top_ci\")])))\n    print(ggplot(curves.a.rep, aes(x, y)) +\n            geom_abline(intercept=0, slope=1,  size=0.5, alpha=0.8, color=\"#000000\") +\n            geom_point() +\n            geom_smooth(method=\"lm\") +\n            geom_point(aes(max, max), data=curves.a.rep_cor, alpha=0) +\n            geom_text(aes(x=max, y=0, label=short_str), curves.a.rep_cor, hjust=1, vjust=0, size=12, color=\"#D73027\") +\n            labs(title=paste0(\"Reproducibility(\", var, \")\")) +\n            theme_classic(base_size=14))\n  }\n  dev.off()\n  \n}\n\n",
    "created" : 1507212149803.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "935346785",
    "id" : "F916E08B",
    "lastKnownWriteTime" : 1507224462,
    "last_content_update" : 1507224460428,
    "path" : "X:/Sergej/methods_2/scripts/analysis.reproducibility.R",
    "project_path" : "analysis.reproducibility.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}