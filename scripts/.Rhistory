arrangeGrob(p.correlation, p.unrep_cases, heights=c(0.7, 0.3)),
arrangeGrob(p.media_effect),
widths=c(0.5, 0.4)
)
grid.arrange(arrangeGrob(p.table))
dev.off()
###################################
# Unreproducible (3) curves
###################################
curves = read.delim("../data/curves.tab", header=T, sep="\t", stringsAsFactors=F, na="")
media_names = read.delim("../data/media_names.tab")
media_names$MediaType = media_names$Type
res.everything = read.delim("../data/curves_annotation.tab", stringsAsFactors=F, na="")
media.order = rev(c("1", "13", "14", "15 A", "15 B", "16", "2", "3", "4", "5", "7", "10", "11", "8", "9", "GMM", "BHI++", "WCA", "mGAM"))
th = 0.15
res.everything.f = subset(res.everything, Volume==9 & !is.na(Species) & !is.na(Media))
res.everything.f$MaxODRaw = res.everything.f$MaxOD
res.everything.f$MaxOD = res.everything.f$MaxOD - res.everything.f$BlankOD
res.everything.f$MaxODNegative = res.everything.f$MaxOD - res.everything.f$BlankOD
res.everything.f$MaxOD[res.everything.f$MaxOD < 0] = 0
res.everything.f = ddply(res.everything.f, .(File, Species, Media, Passage), summarize, MaxOD=mean(MaxOD), MaxODNegative=mean(MaxODNegative), MaxODRaw=mean(MaxODRaw), MaxTime=mean(MaxTime), BlankOD=mean(BlankOD), Class=Class[1])
res.combinations = merge(subset(res.everything.f, Passage==1), subset(res.everything.f, Passage==3), by=c("Species", "Media"), suffixes=c(".1", ".3"))
res.combinations = merge(res.combinations, media_names[,c("ShortName", "MediaType")], by.x="Media", by.y="ShortName")
res.combinations$unreproducible.3 = with(res.combinations, ifelse(MaxOD.1>=th & MaxOD.3<=th & MaxOD.3 < MaxOD.1-th , "unreproducible", "reproducible"))
res.combinations$unreproducible.1 = with(res.combinations, ifelse(MaxOD.3>=th & MaxOD.1<=th & MaxOD.1 < MaxOD.3-th , "unreproducible", "reproducible"))
res.combinations$unreproducible = with(res.combinations, ifelse(unreproducible.1=="unreproducible" | unreproducible.3=="unreproducible", "unreproducible", "reproducible"))
res.combinations$MaxOD.diff = with(res.combinations, MaxODNegative.3-MaxODNegative.1)
res.combinations$Media = factor(res.combinations$Media, media.order)
res.combinations = res.combinations[order(res.combinations$Media),]
res.combinations.unrep = subset(res.combinations, unreproducible.3=="unreproducible")
res.combinations.unrep = res.combinations.unrep[order(res.combinations.unrep$MediaType),]
with(subset(res.combinations, unreproducible!="anything"), cor.test(MaxOD.1, MaxOD.3))
cor.res = with(subset(res.combinations, unreproducible!="anything"), cor.test(MaxOD.1, MaxOD.3))
cor.res$estimate
cor.res$estimate^2
cor.res$p.value
cor.pval = paste0("1e", round(log10(cor.res$p.value)+1, 0))
cor.pval
cor.n = sum(res.combinations$unreproducible!="anything")
cor.res$data.name
cor.res$parameter
p.correlation = ggplot(res.combinations) +
geom_abline(intercept=0, slope=1, color="#999999", size=2) +
geom_point(aes(MaxOD.1, MaxOD.3, color=factor(MediaType), shape=unreproducible), size=3, alpha=0.7) +
geom_text(x=0.25, y=1.75, label=paste0("R2=", cor.R2, " (p<", cor.pval, ", n=", cor.n, ")"), hjust=0, vjust=0, size=5, data=data.frame(x=c(1))) +
geom_smooth(aes(MaxOD.1, MaxOD.3), method="lm") +
geom_path(aes(x=x, y=y), data=data.frame(x=c(-2, th, 2*th, Inf), y=c(-2-th, 0, th, th)), color="#FF0000") +
geom_path(aes(x=x, y=y), data=data.frame(x=c(-2-th, 0, th, th), y=c(-2, th, 2*th, Inf)), color="#FF0000") +
labs(x=expression(MaxOD[Passage1]), y=expression(MaxOD[Passage3])) +
coord_cartesian(xlim=c(0,2), ylim=c(0,2)) +
theme_bw(base_size=16)  +
theme(legend.position = c(1, 1), legend.justification = c(1, 1)) +
scale_shape_manual(values=c(reproducible=21, unreproducible=22))
res.combinations.f = subset(res.combinations, unreproducible!="X")
res.combinations.pval = ddply(res.combinations.f, .(Media), function(z) {
data.frame(
pvalue.paired=wilcox.test(z$MaxOD.3, z$MaxOD.1, paired=T)$p.value,
n=nrow(z)
)
})
media.defined = as.character(c(2:5, 7, 10:11))
abundant_species = read.table("../data/_abundant_species.txt", sep="\t", quote="", header=F, stringsAsFactors=F, na.strings="")$V1
organisms.ann = read.delim("../data/organisms.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
# Load abundance average data (only species passing 1% rel. abundance and 10% prevalence threshold)
# Aggregate abundance data by species level (merge strains)
organisms.gut = read.table("../data/screenG_tax_info_specI_clusters.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
organisms.gut = merge(organisms.gut, organisms.ann[!is.na(organisms.ann$nid), c("species", "lineage_species", "nid")], by.x="NT_code", by.y="nid")
organisms.gut = ddply(organisms.gut, .(lineage_species), summarize, Prevalence=mean(Prevalence), Prevalence=mean(Prevalence), Abundance=mean(Rel_ab_median))
rownames(organisms.gut) = organisms.gut$lineage_species
# Load species monoculture growth data
# Aggregate growth data by species level (merge strains)
#growth_matrix = read.table("../data/supplementary/growth_matrix.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
curves.a = read.table("../data/curves_annotation.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
curves.a.f = subset(curves.a, is.na(ConditionSpecies) & !is.na(Species) & Passage %in% 1 & Media %in% c(media.rich, media.defined) & !is.na(Media))
growth_matrix = cuves.merge_annotations2(curves.a.f, nogrowth=T)
growth_matrix = dcast(growth_matrix, Species ~ Media, value.var="MaxOD")
colnames(growth_matrix)[1] = "species"
growth_matrix = merge(growth_matrix, organisms.ann[, c("species", "lineage_species")], by="species")
growth_matrix = ddply(growth_matrix, .(lineage_species), function(x) {
if(nrow(x) > 2) {xx <<- x}
x.mean = matrix(rep(colMeans(x>0), each=nrow(x)), ncol=ncol(x))
x[x==0 & x.mean>0.5] = NA
x.cols = setdiff(colnames(x), c("species", "lineage_species"))
x = apply(x[,x.cols], 2, min, na.rm=T)
x[is.nan(x)] = NA
x
})
colnames(growth_matrix) = gsub("^M", "", colnames(growth_matrix))
rownames(growth_matrix) = growth_matrix$lineage_species
growth_matrix$lineage_species = NULL
growth_matrix = growth_matrix[,c(media.defined, media.rich)]
# Create ranked and scaled growth matrix
growth_matrix.rank = apply(growth_matrix, 2, function(x) {
x.res = length(x) - rank(x, ties.method="min") + 1
x.res
})
growth_matrix.rank_table = data.frame(lineage_species=rownames(growth_matrix.rank))
rownames(growth_matrix.rank_table) = growth_matrix.rank_table$lineage_species
growth_matrix.rank_table$rich_medrank = apply(growth_matrix.rank[, media.rich], 1, median, na.rm=T)
growth_matrix.rank_table$defined_medrank = apply(growth_matrix.rank[, media.defined], 1, function(z) mean(sort(z)[3:5], na.rm=T))
growth_matrix.rank_table$preference = with(growth_matrix.rank_table, log2(rich_medrank / defined_medrank))
growth_matrix.rank_table$preferred_media = "no preferrence"
#  growth_matrix.rank_table$preferred_media[growth_matrix.rank_table$preference <= -1] = "rich"
growth_matrix.rank_table$preferred_media[growth_matrix.rank_table$preference >= 1] = "defined"
growth_matrix.rank_table$preferred_media = factor(growth_matrix.rank_table$preferred_media, c("rich", "no preferrence", "defined"))
growth_matrix.rank_table$Abundance = organisms.gut[rownames(growth_matrix.rank_table), "Abundance"]
growth_matrix.rank_table$Prevalence = organisms.gut[rownames(growth_matrix.rank_table), "Prevalence"]
growth_matrix.rank_table$AverageDefinedMaxOD = rowMeans(growth_matrix[, as.character(intersect(colnames(growth_matrix), c(1:8, 10:11)))])[rownames(growth_matrix.rank_table)]
growth_matrix.rank_table.export = growth_matrix.rank_table
colnames(growth_matrix.rank_table.export)[1] = "Species"
growth_matrix.rank_table.export = growth_matrix.rank_table.export[,c("Species", "rich_medrank", "defined_medrank", "preferred_media", "Abundance", "Prevalence")]
dens = density(growth_matrix.rank_table$preference, na.rm=T)
df = data.frame(x=dens$x, y=dens$y)
df$preferred_media = "no preferrence"
df$preferred_media[df$x <= -1] = "rich"
df$preferred_media[df$x >= 1] = "defined"
df.n = ddply(growth_matrix.rank_table, .(preferred_media), summarize, N=sum(organisms.ann$lineage_species %in% lineage_species), preference=median(preference))
defined_growth_pval = with(growth_matrix.rank_table, t.test(AverageDefinedMaxOD[preferred_media=='defined'], AverageDefinedMaxOD[preferred_media!='defined']))$p.value
ggplot(growth_matrix.rank_table) +
geom_density(aes(fill=preferred_media, x=AverageDefinedMaxOD), alpha=0.3) +
theme_slim() +
labs(fill="Preferred media", x="Average MaxOD on defined media") +
scale_fill_manual(values=RColorBrewer::brewer.pal(9, "Greys")[c(4, 9)]) +
theme(legend.position = c(0.2, 0.8))
dev.off()
ggplot(growth_matrix.rank_table) +
geom_density(aes(fill=preferred_media, x=AverageDefinedMaxOD), alpha=0.3) +
theme_slim() +
labs(fill="Preferred media", x="Average MaxOD on defined media") +
scale_fill_manual(values=RColorBrewer::brewer.pal(9, "Greys")[c(4, 9)]) +
theme(legend.position = c(0.2, 0.8))
t.test(AverageDefinedMaxOD ~ preferred_media, growth_matrix.rank_table)
t.test(growth_matrix.rank_table$AverageDefinedMaxOD[preferred_media=="defined"], growth_matrix.rank_table$AverageDefinedMaxOD[preferred_media!="defined"])
t.test(growth_matrix.rank_table$AverageDefinedMaxOD[growth_matrix.rank_table$preferred_media=="defined"], growth_matrix.rank_table$AverageDefinedMaxOD[growth_matrix.rank_table$preferred_media!="defined"])
t.test(AverageDefinedMaxOD ~ preferred_media, growth_matrix.rank_table)
x = t.test(AverageDefinedMaxOD ~ preferred_media, growth_matrix.rank_table)
x$p.value
defined_growth_pval = t.test(AverageDefinedMaxOD ~ preferred_media, growth_matrix.rank_table)$p.value
defined_growth_pval
round(ceiling(defined_growth_pval))
round(ceiling(log10(defined_growth_pval)))
paste0("10", ceiling(log10(defined_growth_pval)))
paste0("x<10e", ceiling(log10(defined_growth_pval)))
paste0("p<10e", ceiling(log10(defined_growth_pval)))
ggplot(growth_matrix.rank_table) +
geom_density(aes(fill=preferred_media, x=AverageDefinedMaxOD), alpha=0.3) +
geom_text(x=0.5, y=1.7, label=defined_growth_pval)
ggplot(growth_matrix.rank_table) +
geom_density(aes(fill=preferred_media, x=AverageDefinedMaxOD), alpha=0.3) +
geom_text(x=0.5, y=1.7, label=defined_growth_pval) +
theme_slim() +
labs(fill="Preferred media", x="Average MaxOD on defined media") +
scale_fill_manual(values=RColorBrewer::brewer.pal(9, "Greys")[c(4, 9)]) +
theme(legend.position = c(0.2, 0.8))
defined_growth_pval
defined_growth_pval = t.test(AverageDefinedMaxOD ~ preferred_media, growth_matrix.rank_table)$p.value
log10(defined_growth_pval)
ceiling(log10(defined_growth_pval))
defined_growth_pval = paste0("p<10e", ceiling(log10(defined_growth_pval)))
defined_growth_pval
ggplot(growth_matrix.rank_table) +
geom_density(aes(fill=preferred_media, x=AverageDefinedMaxOD), alpha=0.3) +
geom_text(x=0.5, y=1.7, label=defined_growth_pval) +
theme_slim() +
labs(fill="Preferred media", x="Average MaxOD on defined media") +
scale_fill_manual(values=RColorBrewer::brewer.pal(9, "Greys")[c(4, 9)]) +
theme(legend.position = c(0.2, 0.8))
library(gridExtra)
library(plyr)
library(ggplot2)
library(reshape2)
library(grid)
media_names = read.delim("../data/media_names.tab")
media_names$MediaType = media_names$Type
res.everything = read.delim("../data/curves_annotation.tab", stringsAsFactors=F, na="")
media.order = rev(c("1", "13", "14", "15 A", "15 B", "16", "2", "3", "4", "5", "7", "10", "11", "8", "9", "GMM", "BHI++", "WCA", "mGAM"))
th = 0.15
res.everything.f = subset(res.everything, Volume==9 & !is.na(Species) & !is.na(Media))
res.everything.f$MaxODRaw = res.everything.f$MaxOD
res.everything.f$MaxOD = res.everything.f$MaxOD - res.everything.f$BlankOD
res.everything.f$MaxODNegative = res.everything.f$MaxOD - res.everything.f$BlankOD
res.everything.f$MaxOD[res.everything.f$MaxOD < 0] = 0
res.everything.f = ddply(res.everything.f, .(File, Species, Media, Passage), summarize, MaxOD=mean(MaxOD), MaxODNegative=mean(MaxODNegative), MaxODRaw=mean(MaxODRaw), MaxTime=mean(MaxTime), BlankOD=mean(BlankOD), Class=Class[1])
res.combinations = merge(subset(res.everything.f, Passage==1), subset(res.everything.f, Passage==3), by=c("Species", "Media"), suffixes=c(".1", ".3"))
res.combinations = merge(res.combinations, media_names[,c("ShortName", "MediaType")], by.x="Media", by.y="ShortName")
res.combinations$unreproducible.3 = with(res.combinations, ifelse(MaxOD.1>=th & MaxOD.3<=th & MaxOD.3 < MaxOD.1-th , "unreproducible", "reproducible"))
res.combinations$unreproducible.1 = with(res.combinations, ifelse(MaxOD.3>=th & MaxOD.1<=th & MaxOD.1 < MaxOD.3-th , "unreproducible", "reproducible"))
res.combinations$unreproducible = with(res.combinations, ifelse(unreproducible.1=="unreproducible" | unreproducible.3=="unreproducible", "unreproducible", "reproducible"))
res.combinations$MaxOD.diff = with(res.combinations, MaxODNegative.3-MaxODNegative.1)
res.combinations$Media = factor(res.combinations$Media, media.order)
res.combinations = res.combinations[order(res.combinations$Media),]
res.combinations.unrep = subset(res.combinations, unreproducible.3=="unreproducible")
res.combinations.unrep = res.combinations.unrep[order(res.combinations.unrep$MediaType),]
cor.res = with(subset(res.combinations, unreproducible!="anything"), cor.test(MaxOD.1, MaxOD.3))
cor.pval = paste0("1e", round(log10(cor.res$p.value)+1, 0))
cor.n = sum(res.combinations$unreproducible!="anything")
cor.R2 = round(cor.res$estimate^2, 2)
set.seed(2)
p.correlation = ggplot(res.combinations) +
geom_abline(intercept=0, slope=1, color="#999999", size=2) +
geom_point(aes(MaxOD.1, MaxOD.3, color=factor(MediaType), shape=unreproducible), size=3, alpha=0.7) +
geom_text(x=0.25, y=1.75, label=paste0("R2=", cor.R2, " (p<", cor.pval, ", n=", cor.n, ")"), hjust=0, vjust=0, size=5, data=data.frame(x=c(1))) +
geom_smooth(aes(MaxOD.1, MaxOD.3), method="lm") +
geom_path(aes(x=x, y=y), data=data.frame(x=c(-2, th, 2*th, Inf), y=c(-2-th, 0, th, th)), color="#FF0000") +
geom_path(aes(x=x, y=y), data=data.frame(x=c(-2-th, 0, th, th), y=c(-2, th, 2*th, Inf)), color="#FF0000") +
labs(x=expression(MaxOD[Passage1]), y=expression(MaxOD[Passage3])) +
coord_cartesian(xlim=c(0,2), ylim=c(0,2)) +
theme_bw(base_size=16)  +
theme(legend.position = c(1, 1), legend.justification = c(1, 1)) +
scale_shape_manual(values=c(reproducible=21, unreproducible=22))
p.correlation
res.combinations.unrep_text = ddply(res.combinations.unrep, .(Species, MediaType), function(z) {
d = ddply(z, .(Media), summarize,
count=length(Media),
Media=gsub(" ", "", Media[1]),
details=paste0(ifelse(grepl("^[0-9]", Media), "M", ""), Media, " [", paste(round(MaxOD.1, 2), collapse=" "), "]"),
MaxOD.1=mean(MaxOD.1))
data.frame(count=sum(d$count), MedianMaxOD.1=median(d$MaxOD.1), details=paste0(d$details, collapse=", "))
})
res.combinations.unrep_text = ddply(res.combinations.unrep_text, .(Species), mutate, cumcount=cumsum(count), cumcount2=cumcount-count+0.05)
p.unrep_cases = ggplot(res.combinations.unrep) +
geom_bar(aes(x=Species, y=1, fill=MediaType), stat="identity", position="stack") +
geom_text(aes(x=Species, y=cumcount2, color=MediaType, label=details), stat="identity", hjust=0, size=4, data=res.combinations.unrep_text) +
scale_fill_manual(values=c(Defined="#e6ee9c", Minimal="#c5e1a5", Mucin="#a5d6a7", Rich="#80cbc4")) +
scale_color_manual(values=c(Defined="#827717", Minimal="#33691e", Mucin="#1b5e20", Rich="#004d40")) +
scale_y_continuous(breaks=0:max(ddply(res.combinations.unrep, .(Species), nrow)$V1)) +
labs(y="Not reproduced in passage 3 (count)", x="") +
theme_bw(base_size = 30) +
theme(panel.grid.major.y=element_blank(), panel.grid.major.x=element_blank(), panel.grid.minor.y=element_blank(), panel.grid.minor.x=element_blank(), legend.position = c(1, 1), legend.justification = c(1, 1)) +
coord_flip()
p4 = tableGrob(res.combinations.unrep[,c("Species", "Media", "MaxOD.1", "MaxOD.3")], rows=NULL, theme=ttheme_minimal(core=list(fg_params=list(cex=0.5)), colhead=list(fg_params=list(cex=0.5))))
p4 = gtable::gtable_add_grob(p4, grobs = segmentsGrob(name='segment', y1 = unit( 0, 'npc' ), gp=gpar(lty=1, lwd=1)), t=1, l=1, r=ncol(p4))
p4 = gtable::gtable_add_grob(p4, grobs = segmentsGrob(name='segment', x1 = unit( 0, 'npc' ), gp=gpar(lty=1, lwd=1)), t=1, l=2, r=2, b=nrow(p4))
res.combinations.unrep_text
res.combinations.unrep
View(res.combinations.unrep[,c("Media", "Species")])
View(res.combinations.unrep[,c("Media", "Species")])
x = res.combinations
x = res.combinations
x$effect = "none"
x$effect[x$unreproducible.3=="unreproducible"] = "reduction"
x$effect[x$unreproducible.1=="unreproducible"] = "increase"
write.table(x[,c("Media", "Species", "effect")], file="../data/generated/passage_effect.tab", sep="\t", quote=F, row.names=F, na="")
(32897-9465)/32897
13785/23250
500/448
(448500)
(448/500)
(448/500)*499.0
library(grDevices)
library(ggplot2)
library(plyr)
library(reshape2)
library(gplots)
library(dplyr)
library(tidyr)
library(readr)
source("analyze.functions.R")
set.seed(0)
growth_matrix = read_tsv("../data/supplementary/growth_matrix.tab")
colnames(growth_matrix) = gsub("^M", "", colnames(growth_matrix))
growth_matrix = growth_matrix[!grepl("15|16", colnames(growth_matrix))]
growth = growth_matrix %>% gather(medium, growth, 2:ncol(growth_matrix))
abundant_species = read.table("../data/abundant_species.tab", sep="\t", quote="", header=F, stringsAsFactors=F, na.strings="")$V1
species = read_tsv("../data/organisms.tab")
species = species %>% filter(species %in% abundant_species)
abundances = read_tsv("../data/screenG_tax_info_specI_clusters.tab")
specI <- species %>%
left_join(abundances %>% select(NT_code, SpecI_ID), by=c("nid"="NT_code")) %>%
select(species, SpecI_ID)
specI_growth = growth_matrix %>% left_join(specI, by=c("Species"="species")) %>% filter(!is.na(SpecI_ID))
specI_growth_matrix = as.matrix(subset(specI_growth,,-c(Species, SpecI_ID)))
rownames(specI_growth_matrix) = specI_growth$SpecI_ID
specI_growth_matrix[specI_growth_matrix==0] = NA
specI_growth_matrix[apply(specI_growth_matrix, 2, rank) > 30] = NA
all_abundances = read.delim("../data/screenG_rel_ab_specI_clusters.tab")
all_abundances = all_abundances[ specI_growth$SpecI_ID, ]
all_abundances_0na <- all_abundances
all_abundances_0na[ all_abundances == 0 ] <- NA
cor_matrix.resample.long = data.frame()
specI_growth_matrix
all_abundances = read.delim("../data/screenG_rel_ab_specI_clusters.tab")
all_abundances
View(all_abundances)
dim(specI_growth)
colnames(specI_growth)
dim(specI_growth_matrix)
dim(all_abundances_0na)
colnames(all_abundances_0na)
cor_matrix.resample.long = data.frame()
for(sample.i in  1:20) {
all_abundances_0na.resample = apply(all_abundances_0na, 2, sample)
cor_matrix.resample = cor(all_abundances_0na.resample, specI_growth_matrix, use="p", method = "s")
cor_matrix.resample = cor_matrix.resample[,1:(ncol(cor_matrix.resample)-1)]  # remove M16
cor_matrix.resample.long = rbind(cor_matrix.resample.long, melt(cor_matrix.resample))
}
colnames(cor_matrix.resample.long) = c("subject", "media", "correlation")
cor_matrix.resample.long$dataset = "background"
dim(all_abundances_0na)
dim(specI_growth_matrix)
cor_matrix = cor(all_abundances_0na, specI_growth_matrix, use="p", method = "s")
dim(cor_matrix)
library(plyr)
library(reshape2)
library(ggplot2)
library(pheatmap)
source("analyze.functions.R")
phylumcol = c("Bacteroidetes"="#8DD3C7", "Firmicutes"="#FFFFB3", "Proteobacteria"="#BEBADA", "Actinobacteria"="#FB8072", "Verrucomicrobia"="#80B1D3", "Fusobacteria"="#B3DE69")
species.general = c("A. odontolyticus", "B. adolescentis", "B. animalis subsp. lactis BI-07", "B. animalis subsp. lactis BL-04",
"B. caccae", "B. clarus", "B. dorei", "B. fragilis", "B. fragilis enterotoxigenic", "B. fragilis HM-20", "B. fragilis HM-709",
"B. fragilis HM-710", "B. fragilis HM-711", "B. fragilis HM-712", "B. fragilis HM-713", "B. fragilis HM-714", "B. hansenii",
"B. longum subsp. infantis", "B. obeum", "B. ovatus", "B. stercoris", "B. thetaiotaomicron", "B. uniformis", "B. uniformis HM-715",
"B. uniformis HM-716", "B. vulgatus", "B. vulgatus HM-720", "B. xylanisolvens", "C. aerofaciens", "C. comes", "C. perfringens C36",
"C. perfringens S107", "C. ramosum", "C. saccharolyticum", "D. formicigenerans", "D. piger", "E. coli CFT073", "E. coli E2348/69",
"E. coli ED1a", "E. coli H10407", "E. coli HM605", "E. coli IAI1", "E. coli UTI89", "E. eligens", "E. lenta", "E. limosum", "E. rectale",
"E. siraeum", "F. nucleatum subsp. animalis", "F. nucleatum subsp. nucleatum", "L. fermentum", "L. gasseri", "L. lactis", "L. paracasei",
"L. plantarum", "L. salivarius", "L. vaginalis", "P. difficile", "P. distasonis", "P. merdae", "R. gnavus", "R. intestinalis",
"S. flexneri", "S. parasanguinis", "S. salivarius", "S. sonnei", "S. typhimurium ATCC14028", "S. typhimurium LT2", "V. cholerae A1552",
"V. cholerae N16961", "V. parvula", "Y. pseudotuberculosis")
library(plyr)
library(reshape2)
library(ggplot2)
library(pheatmap)
source("analyze.functions.R")
phylumcol = c("Bacteroidetes"="#8DD3C7", "Firmicutes"="#FFFFB3", "Proteobacteria"="#BEBADA", "Actinobacteria"="#FB8072", "Verrucomicrobia"="#80B1D3", "Fusobacteria"="#B3DE69")
species.general = c("A. odontolyticus", "B. adolescentis", "B. animalis subsp. lactis BI-07", "B. animalis subsp. lactis BL-04",
"B. caccae", "B. clarus", "B. dorei", "B. fragilis", "B. fragilis enterotoxigenic", "B. fragilis HM-20", "B. fragilis HM-709",
"B. fragilis HM-710", "B. fragilis HM-711", "B. fragilis HM-712", "B. fragilis HM-713", "B. fragilis HM-714", "B. hansenii",
"B. longum subsp. infantis", "B. obeum", "B. ovatus", "B. stercoris", "B. thetaiotaomicron", "B. uniformis", "B. uniformis HM-715",
"B. uniformis HM-716", "B. vulgatus", "B. vulgatus HM-720", "B. xylanisolvens", "C. aerofaciens", "C. comes", "C. perfringens C36",
"C. perfringens S107", "C. ramosum", "C. saccharolyticum", "D. formicigenerans", "D. piger", "E. coli CFT073", "E. coli E2348/69",
"E. coli ED1a", "E. coli H10407", "E. coli HM605", "E. coli IAI1", "E. coli UTI89", "E. eligens", "E. lenta", "E. limosum", "E. rectale",
"E. siraeum", "F. nucleatum subsp. animalis", "F. nucleatum subsp. nucleatum", "L. fermentum", "L. gasseri", "L. lactis", "L. paracasei",
"L. plantarum", "L. salivarius", "L. vaginalis", "P. difficile", "P. distasonis", "P. merdae", "R. gnavus", "R. intestinalis",
"S. flexneri", "S. parasanguinis", "S. salivarius", "S. sonnei", "S. typhimurium ATCC14028", "S. typhimurium LT2", "V. cholerae A1552",
"V. cholerae N16961", "V. parvula", "Y. pseudotuberculosis")
media.annotation = read.delim("../data/media_names.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
media.annotation = media.annotation[order(media.annotation$Order),]
media.names = sapply(media.annotation$ShortName, function(x) media.annotation$FullName[match(x, media.annotation$ShortName)])
media.names2 = sapply(media.annotation$ShortName, function(x) media.annotation$FullName2[match(x, media.annotation$ShortName)])
media.general = media.annotation$ShortName[media.annotation$IsGeneral==1]
media.rich = media.annotation$ShortName[media.annotation$IsRich==1]
media.defined = as.character(c(2:5, 7, 10:11))
media.files = sapply(media.annotation$ShortName, function(x) media.annotation$Filename[match(x, media.annotation$ShortName)])
organisms.ann = read.delim("../data/organisms.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
rownames(organisms.ann) = organisms.ann$species
curves.a = read.table("../data/curves_annotation.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
curves.a = subset(curves.a, !is.na(Species) & is.na(ConditionSpecies) & Passage==1 & !grepl("_", Media) & !(grepl("Unrep|Undef", Class)))
curves.a$TechnicalReplicatesCount = sapply(curves.a$TechnicalReplicates, function(x) {
x.chars = unlist(strsplit(gsub("([0-9])", "", x), "-"))
x.nums = unlist(strsplit(gsub("([A-Z])", "", x), "-"))
s.size1 = strtoi(charToRaw(x.chars[2]),16L) - strtoi(charToRaw(x.chars[1]),16L) + 1
s.size2 = as.numeric(x.nums[2]) - as.numeric(x.nums[1]) + 1
pmax(s.size1, s.size2)
})
curves.tech = ddply(curves.a, .(Species, Media), summarize, TechnicalReplicatesCount=sum(TechnicalReplicatesCount, na.rm=T))
growth_matrix.q1 = cuves.merge_annotations2(curves.a)
growth_matrix.q1 = merge(growth_matrix.q1, curves.tech, by=c("Species", "Media"))
growth_matrix.q1$ReplicatesText = with(growth_matrix.q1, paste0(Growing, "/", Replicates, " (", TechnicalReplicatesCount, ")"))
table(growth_matrix.q1$Replicates)
table(growth_matrix.q1$Replicates)
nrow(growth_matrix.q1)
table(growth_matrix.q1$Replicates > 2)
library(plyr)
library(reshape2)
library(ggplot2)
library(pheatmap)
source("analyze.functions.R")
phylumcol = c("Bacteroidetes"="#8DD3C7", "Firmicutes"="#FFFFB3", "Proteobacteria"="#BEBADA", "Actinobacteria"="#FB8072", "Verrucomicrobia"="#80B1D3", "Fusobacteria"="#B3DE69")
species.general = c("A. odontolyticus", "B. adolescentis", "B. animalis subsp. lactis BI-07", "B. animalis subsp. lactis BL-04",
"B. caccae", "B. clarus", "B. dorei", "B. fragilis", "B. fragilis enterotoxigenic", "B. fragilis HM-20", "B. fragilis HM-709",
"B. fragilis HM-710", "B. fragilis HM-711", "B. fragilis HM-712", "B. fragilis HM-713", "B. fragilis HM-714", "B. hansenii",
"B. longum subsp. infantis", "B. obeum", "B. ovatus", "B. stercoris", "B. thetaiotaomicron", "B. uniformis", "B. uniformis HM-715",
"B. uniformis HM-716", "B. vulgatus", "B. vulgatus HM-720", "B. xylanisolvens", "C. aerofaciens", "C. comes", "C. perfringens C36",
"C. perfringens S107", "C. ramosum", "C. saccharolyticum", "D. formicigenerans", "D. piger", "E. coli CFT073", "E. coli E2348/69",
"E. coli ED1a", "E. coli H10407", "E. coli HM605", "E. coli IAI1", "E. coli UTI89", "E. eligens", "E. lenta", "E. limosum", "E. rectale",
"E. siraeum", "F. nucleatum subsp. animalis", "F. nucleatum subsp. nucleatum", "L. fermentum", "L. gasseri", "L. lactis", "L. paracasei",
"L. plantarum", "L. salivarius", "L. vaginalis", "P. difficile", "P. distasonis", "P. merdae", "R. gnavus", "R. intestinalis",
"S. flexneri", "S. parasanguinis", "S. salivarius", "S. sonnei", "S. typhimurium ATCC14028", "S. typhimurium LT2", "V. cholerae A1552",
"V. cholerae N16961", "V. parvula", "Y. pseudotuberculosis")
media.annotation = read.delim("../data/media_names.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
media.annotation = media.annotation[order(media.annotation$Order),]
media.names = sapply(media.annotation$ShortName, function(x) media.annotation$FullName[match(x, media.annotation$ShortName)])
media.names2 = sapply(media.annotation$ShortName, function(x) media.annotation$FullName2[match(x, media.annotation$ShortName)])
media.general = media.annotation$ShortName[media.annotation$IsGeneral==1]
media.rich = media.annotation$ShortName[media.annotation$IsRich==1]
media.defined = as.character(c(2:5, 7, 10:11))
media.files = sapply(media.annotation$ShortName, function(x) media.annotation$Filename[match(x, media.annotation$ShortName)])
organisms.ann = read.delim("../data/organisms.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
rownames(organisms.ann) = organisms.ann$species
curves.a.all = read.table("../data/curves_annotation.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
curves.a = subset(curves.a.all, !is.na(Species) & is.na(ConditionSpecies) & Passage==1 & !grepl("_", Media))
growth_matrix.q1 = cuves.merge_annotations2(curves.a)
growth_matrix.q1$Media = gsub("^([0-9])", "M\\1", growth_matrix.q1$Media)
growth_matrix.q1$MaxOD_with_sd = paste0(round(growth_matrix.q1$MaxOD,3), ifelse(growth_matrix.q1$MaxOD>0, paste0(" (", round(growth_matrix.q1$MaxOD_sd,3), ")"), ""))
growth_matrix.q.raw = dcast(growth_matrix.q1, Species ~ Media, value.var="MaxOD")
growth_matrix.q.export = growth_matrix.q.raw[,c("Species", "GMM", "BHI++", "WCA", "mGAM", paste0("M", c(1:5,7:11, 13:14, "15 A", "15 B", "16")))]
growth_matrix.q.raw = read.table("../data/supplementary/growth_matrix.tab", sep="\t", quote="", header=T, na="", check.names=F)
rownames(growth_matrix.q.raw) = growth_matrix.q.raw$Species
growth_matrix.q.raw$Species = NULL
growth_matrix.q.raw = t(growth_matrix.q.raw)
media.hist = data.frame(media=rownames(growth_matrix.q.raw), species.n=rowSums(!is.na(growth_matrix.q.raw) &  growth_matrix.q.raw > 0))
media.hist$media_type = "Other"
media.hist$media_type[media.hist$media %in% c("GMM", "BHI++", "WCA", "mGAM")] = "Rich"
media.hist$media_type[media.hist$media %in% c("M8", "M9")] = "Mucin"
media.hist$media_type[media.hist$media %in% paste0("M", c(2:7, 10:11))] = "Defined"
media.hist$media_type[media.hist$media %in% c("M1", "M13", "M14", "M15 A", "M15 B", "M16")] = "Minimal"
media.hist$media_type = factor(media.hist$media_type, c("Minimal", "Defined", "Mucin", "Rich"))
species.hist = data.frame(species=colnames(growth_matrix.q.raw), media.n=colSums(!is.na(growth_matrix.q.raw) &  growth_matrix.q.raw > 0))
gridExtra::grid.arrange(
ggplot(media.hist) +
geom_histogram(aes(x=species.n, fill=media_type), binwidth=5, position="stack", color="#000000") +
theme_slim() +
scale_fill_manual(values=RColorBrewer::brewer.pal(5, "Greys")[c(1,2,4,5)]) +
coord_cartesian(xlim=c(-2.5, 100)) +
scale_x_continuous(breaks=seq(0, 100, 25)) +
theme(legend.position = c(0.1, 0.8)) +
labs(x = "Number of species growing in media", y="")
,
ggplot(species.hist) +
geom_histogram(aes(x=media.n), binwidth=1, position="stack", color="#000000", fill="#D4D4D4") +
theme_slim() +
labs(x = "Number of media supporting species", y="")
,
ncol=1)
install.packages(c("ggplot2", "plyr", "reshape2", "gplots", "dplyr", "tidyr", "readr", "beeswarm", "XLConnect", "RSQLite", "VennDiagram", "RColorBrewer", "pheatmap", "gridExtra"))
source("analysis.media_species_selection.R")
getwd()
dir.create("./report", showWarnings = FALSE)
source("analysis.media_species_selection.R")
install.packages(c("ggplot2", "plyr", "reshape2", "gplots", "dplyr", "tidyr", "readr", "beeswarm", "XLConnect", "RSQLite", "VennDiagram", "RColorBrewer", "pheatmap", "gridExtra", "XLConnectJars"))
source("analysis.media_species_selection.R")
install.packages("XLConnectJars")
source("analysis.media_species_selection.R")
library(XLConnectJars)
library(XLConnectJars)
source("analysis.media_species_selection.R")
piechart.media_summary()
getwd()
piechart.species_summary()
getwd()
dir.create("../report", showWarnings = FALSE)
source("analysis.media_species_selection.R")
piechart.species_summary()
piechart.media_summary()
cummulative_plot.enzymatic_coverage()
source("analysis.overview.R")
table.growth_matrix()
table.replicates_number() # Generate replicates table
dir.create("../data/supplementary", showWarnings = FALSE)
table.replicates_number() # Generate replicates table
table.replicates_number() # Generate replicates table
table.growth_matrix()
heatmap.obsulute()
heatmap.relative()
#heatmap.curves()
itol.phylogenetic_tree()
install.packages("ape")
#heatmap.curves()
itol.phylogenetic_tree()
source("analysis.overview.R")
#heatmap.curves()
itol.phylogenetic_tree()
plots.media_preferrence()
source("analysis.abundance.R")
boxplots.prevalence_correlation()
source("analyze.pH.R")
boxplots_and_scater.pH_overview()
source("analysis.phylogenetic.R")
scatter.abundance_correlations()
source("analysis.mucin.R")
plot.mucin_validation_data()
barplots.taxonomi_crank_growth()
source("analysis.phylogenetic.R")
barplots.taxonomi_crank_growth()
barplots.taxonomi_rank_growth() # does not exist
taxonomicrank_growth_barplots() # does not exist
source("analysis.phylogenetic.R")
taxonomicrank_growth_barplots() # does not exist
source("analysis.phylogenetic.R")
taxonomicrank_growth_barplots() # does not exist
taxonomicrank_growth_barplots = function()
{
growth_matrix = read.table("../data/supplementary/growth_matrix.tab", sep="\t", quote="", header=T, stringsAsFactors=F, na.strings="")
rownames(growth_matrix) = growth_matrix$species
growth_matrix$species = NULL
colnames(growth_matrix)[colnames(growth_matrix)=="BHI"] = "BHI++"
growth_matrix = growth_matrix
colnames(growth_matrix) = gsub("^M", "", colnames(growth_matrix))
# Calculate distance
growth_matrix_mat = as.matrix(dist.species(t(growth_matrix)))
# Distance in long format
growth_matrix.dist_long = melt(growth_matrix_mat)[melt(upper.tri(growth_matrix_mat))$value,]
names(growth_matrix.dist_long) <- c("species1", "species2", "GrowthDistance")
growth_matrix.dist_long[,c("species1", "species2")] = t(apply(growth_matrix.dist_long[,c("species1", "species2")], 1, sort))
organisms.ann = read.delim("../data/organisms.tab", sep="\t", na="", quote="", stringsAsFactors=F, header=T)
growth_matrix.dist_long = merge(growth_matrix.dist_long, organisms.ann, by.x="species1", by.y="species")
growth_matrix.dist_long = merge(growth_matrix.dist_long, organisms.ann, by.x="species2", by.y="species", suffixes=c(".sp1", ".sp2"))
x = cbind(subset(growth_matrix.dist_long, phylum.sp1==phylum.sp2 & order.sp1!=order.sp2), Rank="Phylum")
x = rbind(x, cbind(subset(growth_matrix.dist_long, order.sp1==order.sp2 & genus.sp1!=genus.sp2), Rank="Order"))
x = rbind(x, cbind(subset(growth_matrix.dist_long, genus.sp1==genus.sp2 & lineage_species.sp1!=lineage_species.sp2), Rank="Genus"))
x = rbind(x, cbind(subset(growth_matrix.dist_long, lineage_species.sp1==lineage_species.sp2), Rank="Species"))
growth_matrix.dist_long = x
pdf("../report/rank.pdf", paper="a4r", height=8.27, width=11.69)
ggplot(growth_matrix.dist_long) +
geom_jitter(aes(Rank, GrowthDistance), alpha=0.25) +
geom_boxplot(aes(Rank, GrowthDistance), fill="#D4D4D4", outlier.color="#00000000") +
labs(x="Species of the same", y="Growth similarity (euclidean)") +
theme_slim()
dev.off()
}
taxonomicrank_growth_barplots() # does not exist
